# –ë–æ—Ç –Ω–∞ aiogram 3 ‚Äî –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ–¥ –≤–µ—Ä—Å–∏–∏ 3.7.0+
import asyncio
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

# –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω —è–≤–Ω–æ –∑–¥–µ—Å—å, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import os
API_TOKEN = os.environ["API_TOKEN"]

NICE_THINGS = [
    "–ú–∞—Å—Å–∞–∂ —Å–ø–∏–Ω—ã/—à–µ–∏/–ø–ª–µ—á–∞",
    "–ú–∏–Ω–µ—Ç",
    "–î–æ–º–∞—à–Ω–∏–π –∑–∞–≤—Ç—Ä–∞–∫",
    "–°–∫–∞–∑–∞—Ç—å: ¬´–Ø —Ç–∞–∫ —Ç–æ–±–æ–π –≥–æ—Ä–∂—É—Å—å¬ª",
    "–í—ã–ª–æ–∂–∏—Ç—å —Ä–∏–ª—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, –∫–∞–∫–æ–π –æ–Ω –º–æ–ª–æ–¥–µ—Ü",
    "–°–¥–µ–ª–∞—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –ø—Ä–æ –µ–≥–æ —Å–∏–ª—É, —É–º –∏–ª–∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ"
]

user_tasks = {}
user_stats = {}

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

def generate_task_keyboard(tasks):
    buttons = [
        [InlineKeyboardButton(text=f"‚úÖ {task}", callback_data=f"done:{task}")]
        for task in tasks
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def pick_daily_tasks():
    return random.sample(NICE_THINGS, 3)

@dp.message(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–æ—Ç–∫–∞! –ì–æ—Ç–æ–≤–∞ –¥–µ–ª–∞—Ç—å –ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏ –º—É–∂—É? üíñ")

@dp.message(commands=["—Å—Ç–∞—Ç–∞"])
async def send_stats(message: types.Message):
    user_id = message.from_user.id
    stats = user_stats.get(user_id, {})
    if not stats:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–∞—á–∏–Ω–∞–π —Ç–≤–æ—Ä–∏—Ç—å –¥–æ–±—Ä–æ! ü´∂")
        return

    total = sum(stats.values())
    text = f"<b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b>\n\n–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{total}</b>\n\n"
    for task, count in stats.items():
        text += f"{task} ‚Äî <b>{count}</b> —Ä–∞–∑(–∞)\n"

    await message.answer(text)

@dp.callback_query(lambda c: c.data.startswith("done:"))
async def mark_done(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    task = callback.data.split(":", 1)[1]
    today = datetime.now().date().isoformat()
    data = user_tasks.get(user_id, {})
    if data.get("date") != today:
        return await callback.answer("–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!", show_alert=True)
    if task in data.get("done", []):
        return await callback.answer("–£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ üòä")
    data.setdefault("done", []).append(task)

    user_stats.setdefault(user_id, {}).setdefault(task, 0)
    user_stats[user_id][task] += 1

    await callback.answer(f"–û—Ç–º–µ—á–µ–Ω–æ: {task} üíñ")

async def scheduler():
    while True:
        now = datetime.now()
        for hour in [8, 11, 14, 17, 20, 22]:
            run_at = now.replace(hour=hour, minute=0, second=0, microsecond=0)
            if now > run_at:
                run_at += timedelta(days=1)
            await asyncio.sleep((run_at - datetime.now()).total_seconds())
            await send_daily_updates(hour)

async def send_daily_updates(hour):
    for user_id in user_tasks.keys():
        data = user_tasks[user_id]
        if hour == 8:
            tasks = pick_daily_tasks()
            user_tasks[user_id] = {
                "date": datetime.now().date().isoformat(),
                "tasks": tasks,
                "done": []
            }
            await bot.send_message(
                user_id,
                f"üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∫—Ä–∞—Å–æ—Ç–∫–∞! –í–æ—Ç —á–µ–º –º–æ–∂–Ω–æ –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å –º—É–∂–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n" +
                "\n".join([f"{i+1}. {task}" for i, task in enumerate(tasks)]),
                reply_markup=generate_task_keyboard(tasks)
            )
        elif hour in [11, 14, 17, 20]:
            done = data.get("done", [])
            remaining = [t for t in data.get("tasks", []) if t not in done]
            text = f"‚è≥ –°—Ç–∞—Ç—É—Å –¥–Ω—è:\n‚úÖ –°–¥–µ–ª–∞–Ω–æ:\n"
            text += ("\n".join([f"‚Ä¢ {d}" for d in done]) if done else "‚Ä¢ –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ")
            text += "\n\n‚ùó –û—Å—Ç–∞–ª–æ—Å—å:\n"
            text += ("\n".join([f"‚Ä¢ {r}" for r in remaining]) if remaining else "‚Ä¢ –í—Å—ë —Å–¥–µ–ª–∞–Ω–æ! üíï")
            await bot.send_message(user_id, text)
        elif hour == 22:
            done = data.get("done", [])
            remaining = [t for t in data.get("tasks", []) if t not in done]
            text = f"üåô –î–µ–Ω—å –ø–æ–¥–æ—à—ë–ª –∫ –∫–æ–Ω—Ü—É...\n\n"
            text += "‚úÖ –¢—ã —Å–¥–µ–ª–∞–ª–∞:\n" + ("\n".join([f"‚Ä¢ {d}" for d in done]) if done else "‚Ä¢ –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ") + "\n\n"
            text += "‚ùå –ù–µ —É—Å–ø–µ–ª–∞:\n" + ("\n".join([f"‚Ä¢ {r}" for r in remaining]) if remaining else "‚Ä¢ –í—Å—ë —É—Å–ø–µ–ª–∞!") + "\n\n"
            text += "–¢—ã –ø—Ä–æ—Å—Ç–æ —á—É–¥–æ. –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –∏ —Ç—ã —Å–Ω–æ–≤–∞ —Ä–∞–∑–æ—Ä–≤—ë—à—å! üíñ"
            await bot.send_message(user_id, text)

async def main():
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
